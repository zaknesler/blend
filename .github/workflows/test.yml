name: Build & test
on: [push, pull_request]

env:
  PROJECT_NAME: blend
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  BLEND_HOME: ${{ vars.GITHUB_WORKSPACE }}/blend_home

jobs:
  test:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - name: linux-amd64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          # - name: linux-arm64
          #   runner: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          # - name: win-amd64
          #   runner: windows-latest
          #   target: x86_64-pc-windows-msvc
          - name: macos-amd64
            runner: macos-latest
            target: x86_64-apple-darwin
          - name: macos-arm64
            runner: macos-latest
            target: aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        name: Install Node.js 20.x
        with:
          node-version: 20.x
      - uses: pnpm/action-setup@v3
        id: pnpm-install
        with:
          version: 9
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      # - uses: crate-ci/typos@master
      - run: mkdir $GITHUB_WORKSPACE/ui/dist
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"
      - uses: Swatinem/rust-cache@v2
      - run: cargo test --verbose --release --workspace
      - run: pnpm install
      - run: pnpm run build
      - run: cargo build --verbose --locked --release --target ${{ matrix.target }}
      - name: Release Binary
        shell: bash
        run: |
          BIN_SUFFIX=""
          if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
            BIN_SUFFIX=".exe"
          fi

          # The built binary output location
          BIN_OUTPUT="target/${{ matrix.target }}/release/${PROJECT_NAME}${BIN_SUFFIX}"

          # Define a better name for the final binary
          BIN_RELEASE="${PROJECT_NAME}-${{ matrix.name }}${BIN_SUFFIX}"
          BIN_RELEASE_VERSIONED="${PROJECT_NAME}-${{ github.ref_name }}-${{ matrix.name }}${BIN_SUFFIX}"

          # Make output directory
          mkdir "${GITHUB_WORKSPACE}/bin-out"

          # Move the built binary where you want it
          mv "${BIN_OUTPUT}" "${GITHUB_WORKSPACE}/bin-out/${BIN_RELEASE}"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ PROJECT_NAME }}-${{ matrix.name }}
          path: ${{ github.workspace }}/bin-out/*
